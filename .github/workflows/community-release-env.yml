name: community-release-env
on:
  release:
    types: [published]

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: 'checkout source'
        uses: actions/checkout@v4

      - name: Get release info
        id: get_release_name
        run: |
          RELEASE_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          LATEST_RELEASE=$(echo "$RELEASE_JSON" | jq -r '.tag_name')

          echo "RELEASE_TAG=$LATEST_RELEASE" >> $GITHUB_ENV

      - name: Construct and export env vars from copier answers
        shell: bash
        run: |
          PACKAGE_NAME=$(grep -oP '^package_name:\s*\K.+' .copier-answers.yml || true)
          TARGET_DISTRO=$(grep -oP '^target_distro:\s*\K.+' .copier-answers.yml || true)

          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "TARGET_DISTRO=$TARGET_DISTRO" >> $GITHUB_ENV

      - name: Modify existing release env file with new release tag
        run: |
          pip install --upgrade pyyaml
          python - <<EOF
          import os
          import re
          import yaml

          pkg_name = os.environ['PACKAGE_NAME']
          target_distro = os.environ['TARGET_DISTRO']

          release_env_path = \
            f'environment-files/{pkg_name}-qiime2-{target_distro}-release.yml'

          if not os.path.exists(release_env_path):
            raise Exception(f'{release_env_path} not found.')

          with open(release_env_path, 'r') as fh:
            env_data = yaml.safe_load(fh)

          # make sure that the dependency is both a dict obj AND 'pip'
          pip_deps = None
          for dep in env_data.get('dependencies', []):
            if isinstance(dep, dict) and 'pip' in dep:
              pip_deps = dep['pip']
              break

          if pip_deps is None:
            raise ValueError('No pip section found under dependencies.')

          updated = False
          for i, entry in enumerate(pip_deps):
            pattern = rf'^{pkg_name}@git\+https://github\.com/.+?\.git@[\w.-]+$'

            if re.match(pattern, entry):
              new_release = os.environ.get('RELEASE_TAG')

              if not new_release:
                raise ValueError('New Github release tag not found.')

              pip_deps[i] = re.sub(r"(@git\+.+?\.git@)[\w.-]+",
                  lambda m: f"{m.group(1)}{new_release}", entry
              )
              updated = True
              break

          if not updated:
            raise ValueError(f'No pip install found for package {pkg_name}.')

          with open(release_env_path, 'w') as fh:
            yaml.safe_dump(env_data, fh, sort_keys=False)

          print(f'Updated {pkg_name} pip install to release {new_release}.')
          EOF

      # - name: Check for q2d2 fork and clone if fork doesn't already exist
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #     UPSTREAM_REPO: ${{ github.repository }}
      #   run: |
      #     echo "Checking if q2d2 has already forked ${{ env.UPSTREAM_REPO }}..."

      #     if gh repo view "q2d2/$(basename $UPSTREAM_REPO)" --json name -q .name > /dev/null 2>&1; then
      #       echo "Fork already exists!"
      #     else
      #       echo "Fork does not exist. Creating fork..."
      #       gh repo fork "$UPSTREAM_REPO" --clone=false --remote=false --org="q2d2"
      #       echo "Fork created!"
      #     fi

      #     echo "Cloning forked repo..."
      #     gh repo clone "q2d2/$(basename $UPSTREAM_REPO)" forked-repo
      #     cd forked-repo

      #     echo "Setting up remotes..."
      #     git remote add upstream "https://github.com/$UPSTREAM_REPO.git"
      #     git fetch upstream
      #     git checkout -b automated/release-$RELEASE_TAG-env-file-updates upstream/main

      - name: Create pull request with updated release env file
        uses: qiime2-cutlery/create-pull-request@v5
        with:
          token: ${{ github.token }}
          branch: automated/release-$RELEASE_TAG-env-file-updates
          title: "Automated updates to release environment file"
          body: |
            This pull request automatically updates your plugin's
            release environment file upon detection of a newly published
            Github release.

            !! PLEASE REVIEW THE CHANGES CAREFULLY BEFORE MERGING!!

            Once this pull request has been opened, an additional check will
            run through Github Actions. This check ensures the environment is
            installable with the newly updated Github release tag.

            - If this check fails:
              Please examine the logs closely to determine why the updated
              environment couldn't be installed. If you are unable to resolve
              this on your own, please don't hesitate to reach out on our
              user forum at forum.qiime2.org!

            - If this check passes:
              You should be all set to merge this pull request!
              Congrats on the new release, and happy QIIMEing :)
          author: 'q2d2 <q2d2.noreply@gmail.com>'
          committer: 'q2d2 <q2d2.noreply@gmail.com>'
          commit-message: |
            automated update of release environment file for $RELEASE_TAG
