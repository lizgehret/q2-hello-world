name: community-release-env
on:
  release:
    types: [published]

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: 'checkout source'
        uses: actions/checkout@v4

      - name: Get release info
        id: get_release_name
        run: |
          RELEASE_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          LATEST_RELEASE=$(echo "$RELEASE_JSON" | jq -r '.tag_name')

          echo "RELEASE_TAG=$LATEST_RELEASE" >> $GITHUB_ENV

      - name: Construct and export env vars from copier answers
        shell: bash
        run: |
          PACKAGE_NAME=$(grep -oP '^package_name:\s*\K.+' .copier-answers.yml || true)
          TARGET_DISTRO=$(grep -oP '^target_distro:\s*\K.+' .copier-answers.yml || true)

          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "TARGET_DISTRO=$TARGET_DISTRO" >> $GITHUB_ENV

      - name: Modify existing release env file with new release tag
        run: |
          pip install --upgrade pyyaml
          python - <<EOF
          import os
          import re
          import yaml

          pkg_name = os.environ['PACKAGE_NAME']
          target_distro = os.environ['TARGET_DISTRO']

          release_env_path = \
            f'environment-files/{pkg_name}-qiime2-{target_distro}-release.yml'

          if not os.path.exists(release_env_path):
            raise Exception(f'{release_env_path} not found.')

          with open(release_env_path, 'r') as fh:
            env_data = yaml.safe_load(fh)

          # make sure that the dependency is both a dict obj AND 'pip'
          pip_deps = None
          for dep in env_data.get('dependencies', []):
            if isinstance(dep, dict) and 'pip' in dep:
              pip_deps = dep['pip']
              break

          if pip_deps is None:
            raise ValueError('No pip section found under dependencies.')

          updated = False
          for i, entry in enumerate(pip_deps):
            pattern = rf'^{pkg_name}@git\+https://github\.com/.+?\.git@[\w.-]+$'

            if re.match(pattern, entry):
              new_release = os.environ.get('RELEASE_TAG')

              if not new_release:
                raise ValueError('New Github release tag not found.')

              pip_deps[i] = re.sub(r"(@git\+.+?\.git@)[\w.-]+",
                  lambda m: f"{m.group(1)}{new_release}", entry
              )
              updated = True
              break

          if not updated:
            raise ValueError(f'No pip install found for package {pkg_name}.')

          raise ValueError(env_data)

          with open(release_env_path, 'w') as fh:
            yaml.safe_dump(env_data, fh, sort_keys=False)
