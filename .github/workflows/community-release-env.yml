name: community-release-env
permissions:
  contents: write
  pull-requests: write
on:
  release:
    types: [published]

jobs:
  create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: 'checkout source'
        uses: actions/checkout@v4

      - name: Get released_epoch from data.yaml
        id: get-released-epoch
        run: |
          pip install --upgrade pyyaml
          python - <<EOF
          import requests
          import yaml

          data_url = \
            'https://raw.githubusercontent.com/qiime2/distributions/refs/heads/dev/data.yaml'

          try:
            response = requests.get(data_url, allow_redirects=True)
            response.raise_for_status()

            content = response.content.decode('utf-8')
            data_yaml = yaml.safe_load(content)
            released_epoch = data_yaml['released_epoch']
            raise ValueError(released_epoch)

          except requests.exceptions.RequestException as e:
            print(f'Error fetching the URL: {e}')
          except yaml.YAMLError as e:
            print(f'Error parsing YAML: {e}')

      - name: Get release info
        id: get-release-name
        run: |
          RELEASE_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          LATEST_RELEASE=$(echo "$RELEASE_JSON" | jq -r '.tag_name')

          echo "RELEASE_TAG=$LATEST_RELEASE" >> $GITHUB_ENV
          echo "RELEASE_TAG=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Construct and export env vars from copier answers
        shell: bash
        run: |
          PACKAGE_NAME=$(grep -oP '^package_name:\s*\K.+' .copier-answers.yml || true)
          TARGET_DISTRO=$(grep -oP '^target_distro:\s*\K.+' .copier-answers.yml || true)

          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "TARGET_DISTRO=$TARGET_DISTRO" >> $GITHUB_ENV

      - name: Modify existing release env file
        run: |
          pip install --upgrade pyyaml
          python - <<EOF
          import os
          import re
          import yaml

          pkg_name = os.environ['PACKAGE_NAME']
          target_distro = os.environ['TARGET_DISTRO']

          release_env_path = \
            f'environment-files/{pkg_name}-qiime2-{target_distro}-release.yml'

          if not os.path.exists(release_env_path):
            raise Exception(f'{release_env_path} not found.')

          with open(release_env_path, 'r') as fh:
            env_data = yaml.safe_load(fh)

          # make sure that the dependency is both a dict obj AND 'pip'
          pip_deps = None
          for dep in env_data.get('dependencies', []):
            if isinstance(dep, dict) and 'pip' in dep:
              pip_deps = dep['pip']
              break

          if pip_deps is None:
            raise ValueError('No pip section found under dependencies.')

          updated = False
          for i, entry in enumerate(pip_deps):
            pattern = rf'^{pkg_name}@git\+https://github\.com/.+?\.git@[\w.-]+$'

            if re.match(pattern, entry):
              new_release = os.environ.get('RELEASE_TAG')

              if not new_release:
                raise ValueError('New Github release tag not found.')

              pip_deps[i] = re.sub(r"(@git\+.+?\.git@)[\w.-]+",
                  lambda m: f"{m.group(1)}{new_release}", entry
              )
              updated = True
              break

          if not updated:
            raise ValueError(f'No pip install found for package {pkg_name}.')

          with open(release_env_path, 'w') as fh:
            yaml.safe_dump(env_data, fh, sort_keys=False)

          print(f'Updated {pkg_name} pip install to release {new_release}.')
          EOF

      - name: Determine default branch
        id: default-branch
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT

      - name: Create pull request with updated release env file
        uses: qiime2-cutlery/create-pull-request@v5
        env:
          RELEASE_TAG: ${{ steps.get-release-name.outputs.RELEASE_TAG }}
          DEFAULT_BRANCH: ${{ steps.default-branch.outputs.DEFAULT_BRANCH }}
        with:
          token: ${{ github.token }}
          branch: automated/release-${{ env.RELEASE_TAG }}-env-file-updates
          base: ${{ env.DEFAULT_BRANCH }}
          title: "Automated updates to release environment file"
          body: |
            This pull request automatically updates your plugin's release environment file upon detection of a newly published Github release.

            !! PLEASE REVIEW THE CHANGES CAREFULLY BEFORE MERGING !!

            Once this pull request has been opened, an additional check will run through Github Actions. This check ensures the environment is installable with the newly updated Github release tag.

            - If this check fails:
              - Please examine the logs closely to determine why the updated environment couldn't be installed. If you are unable to resolve this on your own, please don't hesitate to reach out on our user forum at https://forum.qiime2.org!

            - If this check passes:
              - You should be all set to merge this pull request! Congrats on the new release, and happy QIIMEing :)
          author: 'q2d2 <q2d2.noreply@gmail.com>'
          committer: 'q2d2 <q2d2.noreply@gmail.com>'
          commit-message: |
            automated update of release environment file for '${{ env.RELEASE_TAG }}'
